<script type="x/template" id="vue-blog-list">

    <div>

        <div class="blog-posts">

            <h3 v-if="isSearchPage" class="blog-heading"><span>{{ trans('Blog::Template.searchResultsFor') }} ${ searchString }</span></h3>
            <h3 v-if="headingText" class="blog-heading">${ headingText }</h3>

            <div v-if="horizontal" class="row">
                <div v-for="(article,index) in articleList" v-if="index >= skip" :class="horizontalClasses">
                    <blog-post :key="index" :article="article" :layout="layout" ></blog-post>
                </div>
            </div>

            <div v-else>
                <blog-post v-for="(article,index) in articleList" v-if="index >= skip" :key="index" :article="article" :layout="layout" ></blog-post>
            </div>

            <div v-if="listIsLoading && layout === 'vertical-XL' && showDummy">
                {% include "Blog::Other.BlogListDummyPost" %}
            </div>

            <div v-if="listIsLoading && showLoader">
                {% include "Blog::Other.Loading" %}
            </div>

            <div v-if="!listIsLoading && articleList.length === 0">
                <h1 class="text-center">{{ trans('Blog::Template.noBlogPostResults') }}</h1>
            </div>

        </div>

        <div class="blog-load-more" v-if="showLoadMore">
            <button v-if="page < lastPageNumber || loadMoreIsLoading" class="btn blog-btn-load-more" @click="loadMore()" :disabled="loadMoreIsLoading" > {{ trans('Blog::Template.loadMore') }} </button>
        </div>
    </div>

</script>
<script type="text/javascript">
    Vue.component('blog-list', {

        delimiters: ['${', '}'],

        props: {
            categoryId: {
                type: Number,
                required: false,
                default: 0
            },
            filters: String,
            layout: {
                type: String,
                required: false,
                default: 'vertical-XL'
            },
            isSearchPage: {
                type: Boolean,
                required: false,
                default: false
            },
            showLoader: {
                type: Boolean,
                required: false,
                default: false
            },
            showLoadMore: {
                type: Boolean,
                required: false,
                default: false
            },
            showDummy: {
                type: Boolean,
                required: false,
                default: false
            },
            horizontal: {
                type: Boolean,
                required: false,
                default: false
            },
            horizontalClasses: {
                type: String,
                required: false,
                default: 'col-md-6 col-lg-4 col-xl-3'
            },
            headingText: {
                type: String,
                required: false
            },
            skip: {
                type: Number,
                required: false,
                default: 0
            }
        },

        created: function() {
            var _this = this;
            this.$options.template = '#vue-blog-list';

            vueEventHub.$on("blog-search", function (searchData) {
                return _this.handleSearch(searchData);
            });

            this.setFilters();
            this.loadFirstPage();
        },

        data: function () {
            return this.init();
        },

        methods: {
            init: function() {
                return {
                    page: 1,
                    lastPageNumber: 1,
                    itemsPerPage: 5,
                    filtersString: '',
                    searchString: '',
                    loadMoreIsLoading: false,
                    listIsLoading: true,
                    articleList: []
                }
            },

            loadFirstPage: function () {
                this.getPosts(this.page)
            },

            loadMore: function() {
                this.loadMoreIsLoading = true;
                this.page++;
                this.getPosts(this.page)
            },

            getPosts: function(page) {
                var _this = this;

                $.ajax({
                    type: "GET",
                    url: '/rest/blogplugin/articles?page=' + Number(page) + '&itemsPerPage=' + Number(this.itemsPerPage) + this.filtersString,
                    contentType: "application/json; charset=utf-8",
                    success: function(data)
                    {
                        $.each(data.entries, function(key,value) {
                            _this.articleList.push(value);
                        });

                        if(data.entries.length === 0){
                            $('.blog-search-input').focus();
                        }

                        _this.lastPageNumber = data.lastPageNumber;
                    },
                    error: function (){
                    },
                    complete: function(){
                        _this.listIsLoading = false;
                        _this.loadMoreIsLoading = false;
                    }
                })
            },

            setFilters: function() {
                var _this = this;
                this.filtersString = '';

                // Only filter by category if we give it one
                if(this.categoryId) {
                    this.filtersString += '&categoryId=' + this.categoryId;
                }

                if(this.isSearchPage) {
                    this.searchString = JSON.parse(this.filters).search;
                }

                $.each( JSON.parse(this.filters), function( key, value ) {
                    _this.filtersString += '&' + key + '=' + value;
                });
            },

            resetState: function() {
                Object.assign(this.$data, this.init());
                this.setFilters();
            },

            handleSearch: function(searchData) {
                this.resetState();

                this.searchString = searchData.searchString;
                this.filtersString += '&search=' + this.searchString;

                this.getPosts(this.page)

            }
        }
    });
</script>